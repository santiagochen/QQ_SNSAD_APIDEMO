package com.tencent{		import flash.net.URLLoader;	import flash.net.URLVariables;	import flash.net.URLRequest;	import flash.external.ExternalInterface;	public class ApiRequest	{		/**		 * 版本号		 */		/*__________________________________________________________________________________________CHANGE LOG		1.00	根据社会化广告接口服务1.0开发的版本				*/		protected static const version:String = "1.00";		/**		 * 应用密钥		 */		protected var _appKey:String;		/**		 * 接口路径，通常不做修改，仅当特殊情况需要另配服务器时修改		 */		protected var _sslPath:String = "http://openapi.act.qq.com/";		/**		 * 数据返回格式(xml, json)		 */		protected var _dataFormat:String = "json";		/**		 * Constructor		 * @param appKey  应用密钥，如未初始化过必填；如初始化过，则非必填		 * @param sslPath 接口路径		 * @param dataFormat 接口返回格式		 		 */			public function ApiRequest(appKey:String=null, sslPath:String="http://openapi.act.qq.com/", dataFormat:String="json")		{			if(!appKey || appKey == "")			{				throw new Error("appKey不能为空");			}			/*if(!new RegExp("^[A-Za-z0-9+]+$").test(appKey))			{				throw new Error("appKey不能包含非法字符");			}	*/					_appKey = appKey;			if(dataFormat != null) 			{				if(!new RegExp("(^json|^xml)+$","i").test(dataFormat))				{					throw new Error("请填写正确的返回格式");				}				_dataFormat = dataFormat.toLowerCase();			}			if(sslPath && sslPath!="")			{				_sslPath = sslPath.charAt(sslPath.length-1)=="/" ? sslPath : sslPath+"/";			}		}//		api		[				/**		 * 设置数据活动id		 */			public function get appKey():String		{			return _appKey;		}				public function set appKey(value:String):void		{			_appKey = value;		}				/**		 * 设置数据接口路径		 */			public function get sslPath():String		{			return _sslPath;		}				public function set sslPath(value:String):void		{			_sslPath = value;		}				/**		 * 设置数据返回格式 xml/json		 */		public function get dataFormat():String		{			return _dataFormat;		}				public function set dataFormat(value:String):void		{			_dataFormat = value;		}				/**		 * 自定义接口		 * @param url 接口路径，填写相对模块路径		 * @param params 参数对象		 * @param method 调用方式GET/POST		 * @return URLLoader实例		 */			public function api(url:String, params:Object=null, method:String="GET"):URLRequest		{			return createRequest((url.indexOf("http://") == -1 ? _sslPath+url : url), params, method.toUpperCase(), _dataFormat);		}					/**		 * 创建URLRequest		 * @param url 接口地址		 * @param params 用户调用API传入的参数		 * @param method GET或POST		 * @param format 返回格式，默认xml，支持json和xml		 * @return URLRequest实例		 */			protected function createRequest(url:String, params:Object, method:String, dataFormat:String):URLRequest		{			if(!_appKey || _appKey == "")			{				throw new Error("你还没有设置过appKey");				return;			}			var request = new URLRequest();				request.url = url;			request.method = method;						request.data = objectToURLVariables(params);						addQueryString(request, "format", dataFormat);			addQueryString(request, "appkey", _appKey);			addGtoken(request);						return request;		}				/**@protected*/		protected function addQueryString(request:URLRequest, param:*, value:*):void		{			if(request.method == "GET")			{				request.data = request.data || new URLVariables();				request.data[param] = value;			}else{				request.url = request.url.indexOf("?") == -1 ? request.url+"?"+param+"="+value : request.url+"&"+param+"="+value;			}		}						/**@protected*/		protected function objectToURLVariables(values:Object):URLVariables		{			var v:URLVariables = new URLVariables();			if(values == null)			{				return v;			}						for(var n:String in values)			{				v[n] = values[n];//encodeURIComponent();			}						return v;		}//		]	api//		gtoken	[		/**@protected*/		protected function addGtoken(request:URLRequest):void		{			request.data = request.data || new URLVariables();			request.data["g_tk"] = ApiRequest.getACSRFToken();		}				/**		 * 获取gtoken		 * @return String		 */				public static function getACSRFToken():int		{			var skey:String = getCookie("skey");			if(skey == null || skey == "")			{				skey = getCookie("lskey");			}			if(skey == null) skey = "";			var hash:int = 5381;			for(var i:int = 0, len:int = skey.length; i < len; ++i)			{				hash += (hash << 5) + skey.charAt(i).charCodeAt();			}			return hash & 0x7fffffff;		}				/**@protected*/			protected static function getCookie(key:String):String		{			var value:String = null; 						var cookieStr:String = ExternalInterface.call("eval", "document.cookie");						if(cookieStr && cookieStr != "")			{				var cookies:Array = cookieStr.split(";");				for (var i:int = 0; i < cookies.length; i++)				{					var cookie:String = cookies[i].replace(/^\s*(.*?)\s*$/, "$1");					if (cookie.substring(0, key.length + 1) == (key + "="))					{						value = cookie.substring(key.length + 1);						break;					}				}			}			return value;		}		//		]	gtoken			}}